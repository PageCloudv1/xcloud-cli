name: '🔄 CI - Tests & Quality Checks'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  lint:
    name: '🔍 Lint & Format Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: '📥 Checkout code'
        uses: actions/checkout@v4

      - name: '🔧 Setup Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: '📦 Install dependencies'
        run: go mod download

      - name: '🔍 Run go fmt'
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -l .
            exit 1
          fi

      - name: '🔍 Run go vet'
        run: go vet ./...

      - name: '🔍 Run golangci-lint'
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  test:
    name: '🧪 Tests (Go ${{ matrix.go-version }})'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.20', '1.21']

    steps:
      - name: '📥 Checkout code'
        uses: actions/checkout@v4

      - name: '🔧 Setup Go ${{ matrix.go-version }}'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: '📦 Install dependencies'
        run: go mod download

      - name: '🧪 Run tests'
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: '📊 Upload coverage to Codecov'
        if: matrix.go-version == '1.21'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: '🏗️ Build'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, test]

    steps:
      - name: '📥 Checkout code'
        uses: actions/checkout@v4

      - name: '🔧 Setup Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: '📦 Install dependencies'
        run: go mod download

      - name: '🏗️ Build binary'
        run: go build -v -o xcloud ./cmd/xcloud/main.go

      - name: '✅ Verify binary'
        run: ./xcloud --version || echo "Binary created successfully"

      - name: '📦 Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: xcloud-cli-${{ github.sha }}
          path: xcloud
          retention-days: 7

  quality-gate:
    name: '✅ Quality Gate'
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()

    steps:
      - name: '📊 Check results'
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Quality gate failed!"
            exit 1
          fi
          echo "✅ All checks passed!"
