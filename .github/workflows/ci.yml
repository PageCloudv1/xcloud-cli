name: 🔧 xCloud CLI - Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest pytest-cov pytest-mock
        pip install black flake8 mypy
        # Install CLI in development mode
        pip install -e .

    - name: 🧹 Code formatting check
      run: |
        black --check --diff src/ tests/
        
    - name: 🔍 Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🔍 Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports

    - name: 🧪 Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: 🔧 Test CLI installation and basic commands
      run: |
        # Test CLI is properly installed
        python -m src.cli.main --help
        python -m src.cli.main version || echo "Version command not implemented yet"
        
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: xcloud-cli-coverage

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install CLI
      run: |
        pip install -e .

    - name: 🧪 Integration tests
      run: |
        # Create test directory
        mkdir -p /tmp/xcloud-integration-test
        cd /tmp/xcloud-integration-test
        
        # Test help commands work
        python -m src.cli.main --help
        
        # TODO: Add more integration tests when templates are ready
        echo "✅ Basic integration tests passed"

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: python

  build-and-publish:
    needs: [test, integration-test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: |
        python -m build

    - name: 🧪 Test built package
      run: |
        # Install from built wheel and test
        pip install dist/*.whl
        xcloud --version || python -m xcloud.cli.main --version

    - name: 🚀 Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*

    - name: 📦 Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true

    - name: 📢 Notify success
      if: success()
      run: |
        echo "🎉 xCloud CLI ${{ github.ref_name }} published successfully!"